@page "/"
@using CardanoSharp.Wallet.Extensions;
@using CardanoSharp.Wallet.Models.Addresses;
@using CardanoSharpTxBuilderDemo.Client.Components
@using CardanoSharpTxBuilderDemo.Shared;
@using CardanoSharp.Blazor.Components;
@using CardanoSharp.Blazor.Components.Enums;
@using Newtonsoft.Json;
@using System.Net;
@using System.Text;
@inject HttpClient _httpClient;
@inject IJSRuntime jsRuntime


<div class="center-screen" style="margin-top:-100px;">

    <div class="connector @Waiting">

        <WalletConnector @ref="walletConnector"
            OutputDebug="true"
            PersistConnectedWallet="true"
            HideCloseButton="false"
            Layout="WalletConnectorLayout.List"
            DisconnectOnConnectButtonClick="false"
            AutoCloseOnConnect="true"
            HideOnModalClick="ModalClickHideOptions.WhenConnected"
            OnConnect="WalletConnected"
            OnDisconnect="WalletDisconnected">
        </WalletConnector>

        <hr/>

        <button class="btn" @onclick=MintAnNft>User Mints an NFT</button>

        <hr/>

        <button class="btn" @onclick=PaySomeAda>User Pays Some ₳</button>
        
        <hr/>

        <div id="msgs" class="txMsgs">
            @foreach (var result in TransactionResults)
            {
                <div class="txMsg">
                    <TxResultComponent Result=@result />
                </div>
            }
        </div>

    </div>

</div>

@code {

    private WalletConnector? walletConnector;

    private List<TxResult> TransactionResults { get; set; } = new List<TxResult>();

    private string Waiting { get; set; } = string.Empty;

    #region PAGE METHODS

    private async Task AddTransactionMessage(TxKind kind, string message)
    {
        TransactionResults.Insert(0, new TxResult
        {
            Kind = kind,
            Message = message
        });

        await jsRuntime.InvokeVoidAsync("scrollToTop", "msgs");
    }

    private void IsWaiting(bool waiting)
    {
        Waiting = waiting ? "waiting" : string.Empty;
    }

    private async Task PaySomeAda()
    {
        IsWaiting(true);

        try
        {
            var txRequest = new TxRequestPay
                {
                    WalletAddress = (await GetUsedWalletAddress()).ToString(),
                    AmountInLovelace = 10000000
                };

            var txCborHex = await GetBuildResponse_Pay(txRequest);

            var userSignTxResult = await WalletSignTx(txCborHex, true);

            var txCborHexSigned = await GetSignResponse(txCborHex, userSignTxResult);

            var txHash = await WalletSubmitTx(txCborHexSigned);

            await AddTransactionMessage(TxKind.Payment, 
                $"Payment successful! Your transaction hash is:<br/><a href=\"https://preprod.cardanoscan.io/transaction/{txHash}\" target=\"_blank\">{txHash}</a>");

            StateHasChanged();
        }
        catch (Exception err)
        {
            await AddTransactionMessage(TxKind.Error,
                $"({err.GetType().Name}) {err.Message}");
        }

        IsWaiting(false);
    }

    private async Task MintAnNft()
    {
        IsWaiting(true);

        try
        {
            var txRequest = new TxRequestMint
                {
                    WalletAddress = (await GetUsedWalletAddress()).ToString(),
                    Label = $"Test-{DateTime.UtcNow.Ticks}"
                };

            var txCborHex = await GetBuildResponse_Mint(txRequest);

            var userSignature = await WalletSignTx(txCborHex, true);

            var txCborHexSigned = await GetSignResponse(txCborHex, userSignature);

            var txHash = await WalletSubmitTx(txCborHexSigned);

            await AddTransactionMessage(TxKind.Payment,
                $"Mint successful! Your transaction hash is:<br/><a href=\"https://preprod.cardanoscan.io/transaction/{txHash}\">{txHash}</a>");

            StateHasChanged();
        }
        catch (Exception err)
        {
            await AddTransactionMessage(TxKind.Error,
                $"({err.GetType().Name}) {err.Message}");
        }

        IsWaiting(false);
    }

    #endregion


    #region WEB METHODS

    private async Task<string> GetBuildResponse_Pay(TxRequestPay request)
    {
        var txRequest = JsonConvert.SerializeObject(request);

        var response = await _httpClient.PostAsync("tx/build/pay", new StringContent(txRequest, Encoding.UTF8, "application/json"));

        if (response.StatusCode != HttpStatusCode.OK) { throw new Exception("Failed to fetch data from server."); }

        var result = await response.Content.ReadAsStringAsync();

        return result ?? string.Empty;
    }

    private async Task<string> GetBuildResponse_Mint(TxRequestMint request)
    {
        var txRequest = JsonConvert.SerializeObject(request);

        var response = await _httpClient.PostAsync("tx/build/mint", new StringContent(txRequest, Encoding.UTF8, "application/json"));

        if (response.StatusCode != HttpStatusCode.OK) { throw new Exception("Failed to fetch data from server."); }

        var result = await response.Content.ReadAsStringAsync();

        return result ?? string.Empty;
    }

    private async Task<string> GetSignResponse(string txCborHex, string userSignature)
    {
        var txRequest = JsonConvert.SerializeObject(new TxRequestSign
        {
            TxCborHex = txCborHex,
            Witness = userSignature
        });

        var response = await _httpClient.PostAsync("tx/sign", new StringContent(txRequest, Encoding.UTF8, "application/json"));

        if (response.StatusCode != HttpStatusCode.OK) { throw new Exception("Failed to fetch data from server."); }

        var result = await response.Content.ReadAsStringAsync();

        return result ?? string.Empty;
    }

    #endregion


    #region WALLET METHODS

    private async Task<Address> GetUsedWalletAddress()
    {
        if (walletConnector != null && walletConnector.Initialized)
        {
            if (walletConnector.Connected)
            {
                var addresses = await walletConnector.GetUsedAddresses();

                return addresses?.FirstOrDefault() ?? new Address();
            }
        }

        return new Address();
    }

    private async Task<string> WalletSignTx(string txCborHex, bool partialSign = false)
    {
        return await walletConnector!.SignTxCbor(txCborHex, partialSign);
    }

    private async Task<string> WalletSubmitTx(string txCborHex)
    {
        return await walletConnector!.SubmitTxCbor(txCborHex);
    }

    #endregion


    #region WALLET EVENT HANDLERS

    private async Task WalletConnected()
    {
        var networkType = await walletConnector!.GetNetworkType();

        await AddTransactionMessage(TxKind.None, $"Connected to wallet on {networkType}.");
    }

    private async Task WalletDisconnected()
    {
        await AddTransactionMessage(TxKind.None, $"Diconnected from wallet.");
    }

    #endregion
}